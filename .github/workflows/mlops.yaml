name: mlops-ci

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      force_retrain:
        description: "Forzar retraining y construir Docker"
        required: false
        default: "false"
      always_build_image:
        description: "Construir/pushear imagen aunque no haya drift"
        required: false
        default: "false"

permissions:
  contents: read
  packages: write

jobs:
  build-train-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # pytest solo para CI (no ensuciamos requirements del proyecto)
          pip install pytest

      - name: Provenance
        run: python scripts/00_provenance.py

      - name: Validate & clean data
        run: python scripts/01_validar_datos.py

      - name: Train baseline
        run: python scripts/02_train_baseline.py

      - name: Unit tests
        run: |
          pytest -q --maxfail=1 --disable-warnings --junitxml=pytest-results.xml

      - name: Publish test report
        if: always()  # sube el artefacto aunque fallen
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: pytest-results.xml

      - name: Upload model artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            models/
            data/processed/housing_clean.csv
            data/provenance.json

  drift-check:
    needs: build-train-test
    runs-on: ubuntu-latest
    outputs:
      drift: ${{ steps.setout.outputs.drift }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install scipy

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: .

      - name: Ensure logs dir
        run: mkdir -p logs

      - name: Run drift check
        id: drift
        run: |
          # Si no hay logs/predictions.csv, el script termina sin error
          python scripts/04_drift_check.py || true

      - name: Set output
        id: setout
        run: |
          DRIFT=false
          if [ -f logs/drift_report.json ]; then
            python - <<'PY'
import json, sys
r=json.load(open('logs/drift_report.json'))
print('true' if r.get('summary',{}).get('drift_detected') else 'false')
PY
            > drift_flag.txt
            DRIFT=$(cat drift_flag.txt)
          fi
          echo "drift=$DRIFT" >> $GITHUB_OUTPUT

retrain-and-docker:
  needs: build-train-test
  if: needs.build-train-test.result == 'success'
  runs-on: ubuntu-latest
  steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install deps
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install xgboost scipy

    # Tomamos los artefactos (modelo + datos procesados) generados en build-train-test
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: .

    # Si NO quieres reentrenar en cada push, comenta este paso.
    # Si quieres reentrenar y reemplazar si mejora, dÃ©jalo.
    - name: Retrain if better
      run: python scripts/03_retrain_if_better.py || true

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Compute lowercase repo (GHCR requires lowercase)
      id: tag
      run: |
        REPO_LC=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "image=${REPO_LC}" >> $GITHUB_OUTPUT

    - name: Build and push image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ steps.tag.outputs.image }}:latest
          ${{ steps.tag.outputs.image }}:${{ github.sha }}
