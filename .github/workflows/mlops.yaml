name: mlops-ci

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      force_retrain:
        description: "Forzar retraining (true/false)"
        required: false
        default: "false"

permissions:
  contents: read
  packages: write

jobs:
  build-train-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install xgboost scipy

      - name: Provenance
        run: python scripts/00_provenance.py

      - name: Validate & clean data
        run: python scripts/01_validar_datos.py

      - name: Train baseline
        run: python scripts/02_train_baseline.py

      - name: Unit tests
        run: pytest -q

      - name: Upload baseline artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            models/
            data/processed/housing_clean.csv
            data/provenance.json

  drift-check:
    needs: build-train-test
    runs-on: ubuntu-latest
    outputs:
      drift: ${{ steps.setout.outputs.drift }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install scipy

      - name: Download baseline artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: .

      - name: Ensure logs dir
        run: mkdir -p logs

      - name: Run drift check
        run: python scripts/04_drift_check.py || true

      - name: Set output
        id: setout
        shell: bash
        run: |
          DRIFT=false
          if [ -f logs/drift_report.json ]; then
            DRIFT=$(python -c "import json; r=json.load(open('logs/drift_report.json')); print('true' if r.get('summary',{}).get('drift_detected') else 'false')")
          fi
          echo "drift=$DRIFT" >> "$GITHUB_OUTPUT"

  retrain:
    needs: [build-train-test, drift-check]
    if: needs.build-train-test.result == 'success' && (github.event.inputs.force_retrain == 'true' || needs.drift-check.outputs.drift == 'true')
    runs-on: ubuntu-latest
    outputs:
      updated: ${{ steps.flag.outputs.updated }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install xgboost scipy

      - name: Download baseline artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: .

      - name: Retrain (forced by job condition)
        run: python scripts/03_retrain_if_better.py --force

      - name: Upload updated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts-updated
          path: |
            models/
            data/processed/housing_clean.csv
            data/provenance.json

      - name: Flag updated= true
        id: flag
        run: echo "updated=true" >> "$GITHUB_OUTPUT"

  docker-image:
    # âœ… Corre SIEMPRE (aunque retrain se haya saltado)
    if: ${{ always() }}
    needs: [build-train-test, retrain]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Debug needs context
        run: |
          echo "needs.retrain.result=${{ needs.retrain.result }}"
          echo "needs.retrain.outputs.updated=${{ needs.retrain.outputs.updated }}"

      # Usa artefactos actualizados si hubo retrain exitoso
      - name: Download updated artifacts (if any)
        if: needs.retrain.result == 'success' && needs.retrain.outputs.updated == 'true'
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts-updated
          path: .

      # Fallback a artefactos base
      - name: Download baseline artifacts (fallback)
        if: needs.retrain.result != 'success' || needs.retrain.outputs.updated != 'true'
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: .

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
